name: Creación y subida de la imagen de angular
on:
  workflow_call:
    outputs:
      image_name:
        description: Nombre de la imagen
        value: ${{ jobs.build.outputs.image_name }}
      port_value_nginx:
        description: Puerto donde recibe las solicitudes nginx
        value: ${{ jobs.build.outputs.port_value_nginx }}
    inputs:
      env_name:
        required: true
        type: string
      branch_name:
        required: true
        type: string

jobs:

  test:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env_name}}
    if: ${{ inputs.branch_name == 'main' }}
    steps:
      - id: pass_testing
        name: Testing de funcionamiento de código
        run: |
          echo "test_user_login_success";sleep 2
          echo "test_create_post";sleep 2
          echo "test_api_response";sleep 2
          echo "test_sql_injection";sleep 2
          echo "All tests have been passed."
 
  build:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: test
    outputs:
      image_name: ${{ steps.set_output.outputs.image_name }}
    environment: ${{ inputs.env_name}}
   

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
          
      
      # Paso para instalar Docker
     # - name: Install Docker
#   run: |
#      sudo apt-get update
#      sudo apt-get install ca-certificates curl
#      sudo install -m 0755 -d /etc/apt/keyrings
#      sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
#      sudo chmod a+r /etc/apt/keyrings/docker.asc
#      echo \
#      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
#      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
#      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#      sudo apt-get update
#      sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#      sudo docker run hello-world
      
      - name: Extractor de la versión de un fichero JSON
        id: version_extractor
        uses: ./.github/actions/extractor
        with:
          file_path: ${{ vars.PACKAGE_JSON_PATH }}
          field_name: version
          
      - name: Extractor del nombre de un fichero JSON
        id: name_extractor
        uses: ./.github/actions/extractor
        with:
          file_path: ${{ vars.PACKAGE_JSON_PATH }}
          field_name: name
          
      - name: Llamar a la action que me crea el nombre de la imagen
        id: tagger
        uses: ./.github/actions/tagger_action
        with:
          branch_name: ${{ inputs.branch_name }}
          user_name: ${{ vars.DOCKERHUB_USER }}
          app_name: ${{ steps.name_extractor.outputs.field_value }}
          app_version: ${{ steps.version_extractor.outputs.field_value }}
          
      - id: set_output
        name: Setear el valor del nombre de la imagen como ouput
        run: |
          echo "image_name=${{ steps.tagger.outputs.image_name }}" >> $GITHUB_OUTPUT

      - name: Hacer login en DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      

      - id: image_creation
        name: Construir imagen
        run: |
          docker build -t ${{ steps.tagger.outputs.image_name }} .
          docker images

      - id: image_push
        name: Subir imagen a docker hub
        run: |
          docker push ${{ steps.tagger.outputs.image_name }}
  




 


      
          
